#!/bin/perl
# perl version : 5.30
# Author : Exo-poulpe
# Description : This program crypt files
package SerPer;

# use warnings;
use strict;
use safe;
use Getopt::Long;
use Time::Hires;
use Time::Seconds;
use Term::ANSIColor;
use utf8;
use threads;
use File::Find;
use Crypt::CBC;
use Digest::MD5 qw(md5 md5_hex);

use constant BLOCK_SIZE => 1024;

Getopt::Long::Configure('bundling');

my $helpText = "
Description : This program use protocol and test login

Usage : \n
--files    | -f\t: file to encrypt
--folder   | -F\t: folder to encrypt (be carry full)
--text     | -t\t: text to encrypt for example
--password | -p\t: password to use
--encrypt  | -e\t: use this for encrypt
--decrypt  | -d\t: use this for decrypt
--version  |   \t: print version
--help     | -h\t: print this help
--verbose  | -v\t: print more verbose

(This tool is for educational purpose only)

\n\nExample :

perl SerPer.pl -f MyFile.txt -p \"Poulpe\" --encrypt

perl SerPer.pl -f EncryptFile.txt.srp -p \"Poulpe\" -o \"FileDecrypt.txt\" --decrypt

perl SerPer.pl -F Folder/ -p \"poulpe\" -e
 This is delete all file in folder and replace by crypted version
";

my $versionText = "
Author \t: \@Exo-poulpe
Version \t: 0.1.0.3

This tool is for educational purpose only, usage of PerlForing for attacking targets without prior mutual consent is illegal.
Developers assume no liability and are not responsible for any misuse or damage cause by this program.

";

my $help;
my $version;
my $verbose;
my $encrypt;
my $decrypt;
my $files;
my $folder;
my $text;
my $output;
my $password;

GetOptions(
    'files|f=s'    => \$files,       # string
    'folder|F=s'   => \$folder,      # string
    'text|t=s'     => \$text,        # string
    'output|o=s'   => \$output,      # string
    'password|p=s' => \$password,    # string
    'encrypt|e'    => \$encrypt,     # flag
    'decrypt|d'    => \$decrypt,     # flag
    'verbose|v'    => \$verbose,     # flag
    'help|h|?'     => \$help,        # flag
) or die($helpText);

sub AccentDOS()
{
    my ($codepage) = ( `chcp` =~ m/:\s+(\d+)/ );
    foreach my $h ( \*STDOUT, \*STDERR, \*STDIN )
    {
        binmode $h, ":encoding(cp$codepage)";
    }
}

sub main()
{

    if ( defined $help )
    {
        print($helpText);
    }
    elsif ( ( defined $files || defined $text ) && defined $password )
    {

# my $iv  = md5($password);        # 16 bytes # IV generated by '-header => 'salt'' in constructor
        my $key = md5_hex($password);    # 32 bytes
        if ( defined $verbose )
        {
            print( "Key : $key\nLength ", length($key) );
            print("\n");

            # print( "Iv : $iv\nLength ", length($iv) );
            # print("\n");
        }
        my $cipher = Crypt::CBC->new(
            -literal_key => 0,
            -key         => $key,
            -cipher      => 'Serpent',
            -header      => 'salt',
            -padding     => "standard",
            -keysize     => 32
        );
        if ( defined $text )
        {
            my $ciphertext = $cipher->encrypt($text);
            print($ciphertext);
        }
        elsif ( defined $files )
        {
            if ( defined $encrypt )
            {
                EncryptFileSerpent( $cipher, $files );
            }
            elsif ( defined $decrypt )
            {
                DecryptFileSerpent( $cipher, $files );
            }
        }

        else
        {
            print($helpText);
        }

    }
    elsif ( defined $folder )
    {
# my $iv  = md5($password);        # 16 bytes # IV generated by '-header => 'salt'' in constructor
        my $key = md5_hex($password);    # 32 bytes
        if ( defined $verbose )
        {
            print( "Key : $key\nLength ", length($key) );
            print("\n");

            # print( "Iv : $iv\nLength ", length($iv) );
            # print("\n");
        }
        my $cipher = Crypt::CBC->new(
            -literal_key => 0,
            -key         => $key,
            -cipher      => 'Serpent',
            -header      => 'salt',
            -padding     => "standard",
            -keysize     => 32
        );
        if ( defined $encrypt )
        {
            EncryptFolderSerpent( $cipher, $folder );
        }
        elsif ( defined $decrypt )
        {
            DecryptFolderSerpent( $cipher, $folder );
        }
    }
    elsif ( defined $version )
    {
        print($versionText);
        exit;
    }
    else
    {
        print($helpText);
    }
}

sub EncryptFileSerpent($$)
{
    my ( $cipher, $localFile ) = @_;
    my $buffer;
    $cipher->start('encrypting');
    open( my $FILE, $localFile );
    my $dstFile = ( defined $output ) ? $output : $localFile . ".srp";
    open( my $FILEDST, ">", $dstFile );
    binmode $FILEDST;
    binmode $FILE;

    while ( read( $FILE, $buffer, BLOCK_SIZE ) )
    {
        if ( defined $verbose )
        {
            print( $cipher->crypt($buffer) );
        }
        print $FILEDST $cipher->crypt($buffer);
    }
    if ( defined $verbose )
    {
        print( $cipher->finish );
    }
    print $FILEDST $cipher->finish;
    close($FILEDST);
    close($FILE);
}

sub DecryptFileSerpent($$)
{
    my ( $cipher, $localFile ) = @_;
    my $buffer;
    my $size = stat($localFile)->size;
    my $dstFile;
    $cipher->start('decrypting');
    open( my $FILE, $localFile );
    if ( substr( $localFile, -4 ) eq ".srp" )
    {
        $dstFile = substr( $localFile, 0, -4 );
    }
    else
    {
        $dstFile = $localFile . ".src";
    }
    open( my $FILEDST, ">", $dstFile );
    binmode $FILEDST;
    binmode $FILE;

    while ( read( $FILE, $buffer, BLOCK_SIZE ) )
    {
        if ( defined $verbose )
        {
            print( $cipher->crypt($buffer) );
        }
        print $FILEDST $cipher->crypt($buffer);
    }
    if ( defined $verbose )
    {
        print( $cipher->finish );
    }
    print $FILEDST $cipher->finish;

    close($FILEDST);
    close($FILE);
    truncate( $FILEDST, $size );
}

sub EncryptFolderSerpent($$)
{
    my ( $cipher, $pathFolder ) = @_;
    find( { wanted => \&wanted, no_chdir => 1 }, $pathFolder );

    sub wanted
    {
        if ( -d $File::Find::name )
        {
            if ( defined $verbose )
            {
                print("Dir : $File::Find::name\n");
            }
        }
        else
        {
            if ( defined $verbose )
            {
                print("File : $File::Find::name\n");
            }
            EncryptFileSerpent( $cipher, $File::Find::name );
            unlink($File::Find::name);
        }
    }
}

sub DecryptFolderSerpent($$)
{
    my ( $cipher, $pathFolder ) = @_;
    find(
        {
            wanted => sub {
                if ( -d $File::Find::name )
                {
                    if ( defined $verbose )
                    {
                        print("Dir : $File::Find::name\n");
                    }
                }
                else
                {
                    if ( defined $verbose )
                    {
                        print("File : $File::Find::name\n");
                    }
                    DecryptFileSerpent( $cipher, $File::Find::name );
                }
            },
            no_chdir => 1
        },
        $pathFolder
    );

}

AccentDOS();
main();
